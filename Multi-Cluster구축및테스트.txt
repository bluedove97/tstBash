 m1 107  v1.22.12  v3.3.2  master, etcd 
 w1 109  v1.22.12  v3.3.2  worker       
 m2 108  v1.22.17  v3.3.2  master, etcd 
 w2 110  v1.22.17  v3.3.2  worker       
 m3 112  v1.24.9   v3.3.2  master, etcd 
 w3 113  v1.24.9   v3.3.2  worker       
 r1 111  v2.5.3
 
VM의 메모리때문에 기본 시스템 POD들이 제대로 안뜨는 문제가 발생.
마스터 4G, 워커2G로 다시 시도

 
2. Host Cluster 설정
  1) Cluster1의 Host Cluster 세팅
     Cluster1 master에서 clusterconfiguration의 ks-installer yaml 수정
     --> clusterRole: host
  2) yaml수정 후 정상작동 로그 확인
  3) Cluster1의 ks admin webpage에 접속하여 Host Cluster 세팅이 되었는지 확인
  4) Cluster1 master 접속 후 Host Cluster의 jwtSecret 추출

	 kubectl edit cc ks-installer -n kubesphere-system
	 clusterRole: host
	 hostClusterName: hcluster1
	 
	 kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l 'app in (ks-install, ks-installer)' -o jsonpath='{.items[0].metadata.name}') -f
	 


3. Member Cluster 설정
  1) Cluster2의 Member Cluster 세팅 
     Cluster2 master에서 clusterconfiguration의 ks-installer yaml 수정

     --> clusterRole: member
     --> jwtSecret: {Host Cluster에서 추출한 문자열}
  2) yaml수정 후 정상작동 로그 확인
  3) Cluster3의 Member Cluster 세팅 
     Cluster3 master에서 clusterconfiguration의 ks-installer yaml 수정
     --> clusterRole: member
     --> jwtSecret: {Host Cluster에서 추출한 문자열}
  4) yaml수정 후 정상작동 로그 확인


4. Multi-Cluster 설정
  1) Cluster2를 Member로 Import
     Host Cluster의 ks admin webpage 접속 
     Cluster Management 항목의 Add Cluster 클릭.
     Cluster2의 kubeconfig 복사
  2) Cluster3를 Member로 Import
     Host cluster의 ks admin webpage 접속 
     Cluster Management 항목의 Add Cluster 클릭.
     Cluster3의 kubeconfig 복사
  3) Multi-Cluster 구성 확인
     Host Cluster의 ks admin webpage 의 Cluster Management 항목에서 확인
  4) 각 클러스터 이름
     Host Cluster : hcluster1
     Member Cluster : mcluster2
     Member Cluster : mcluster3


5. Multi-Cluster 배포 테스트
  1) Workspace ws-2 생성 (Avaliable Cluster : M-Cluster2)
     Project pj-m2-01, pj-m2-02 생성
     각각 nginx pod 배포 (replicas:2)
     pod가 배포된 클러스터 및 Node 확인
  2) Workspace ws-3 생성 (Avaliable Cluster : M-Cluster3)
     Project pj-m3-01, pj-m3-02 생성
     각각 nginx pod 배포 (replicas:2)
     pod가 배포된 클러스터 및 Node 확인
  3) Workspace ws-mber생성 (Avaliable Cluster : M-Cluster2, M-Cluster3)
     Multi-cluster Project pj-mber-01, pj-mber-02 생성
     각각 nginx pod 배포 (replicas:4)
     pod가 배포된 클러스터 및 Node 확인


multi-cluster로 배포하는 yaml은 일반 deployment와 다르다
kubectl apply로 안되네

---
apiVersion: types.kubefed.io/v1beta1
kind: FederatedDeployment
metadata:
  namespace: pj-mber-02
  name: web-mber-02
  labels:
    app: web-mber-02
  annotations:
    kubesphere.io/description: kubesphere에서 생성
spec:
  placement:
    clusters:
      - name: mcluster2
      - name: mcluster3
  template:
    metadata:
      namespace: pj-mber-02
      labels:
        app: web-mber-02
    spec:
      replicas: 4
      selector:
        matchLabels:
          app: web-mber-02
      template:
        metadata:
          labels:
            app: web-mber-02
        spec:
          containers:
          - name: web-mber-02
            image: nginx:1.14.2
            ports:
            - containerPort: 80
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
  overrides:
    - clusterName: mcluster2
      clusterOverrides: []
    - clusterName: mcluster3
      clusterOverrides: []

---

apiVersion: types.kubefed.io/v1beta1
kind: FederatedDeployment
metadata:
  namespace: pj-mber-02
  name: web-mber-02
  labels:
    app: web-mber-02
  annotations:
    kubesphere.io/description: kubesphere에서 생성
spec:
  placement:
    clusters:
      - name: mcluster2
      - name: mcluster3
  template:
    metadata:
      namespace: pj-mber-02
      labels:
        app: web-mber-02
    spec:
      replicas: 4
      selector:
        matchLabels:
          app: web-mber-02
      template:
        metadata:
          labels:
            app: web-mber-02
        spec:
          containers:
          - name: web-mber-02
            image: nginx:1.14.2
            ports:
            - containerPort: 80
          serviceAccount: default
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxUnavailable: 25%
          maxSurge: 25%
  overrides:
    - clusterName: mcluster2
      clusterOverrides:
        - path: /spec/replicas
          value: 2
    - clusterName: mcluster3
      clusterOverrides:
        - path: /spec/replicas
          value: 2
---

  4) Workspace ws-all 생성 (Avaliable Cluster : H-Cluster, M-Cluster2, M-Cluster3)
     Project pj-all-01, pj-all-02 생성
     각각 nginx pod 배포 (replicas:6)
     pod가 배포된 클러스터 및 Node 확인


6. Multi-Cluster HA 테스트
  1) M-Cluster2의 work node 강제 다운
     Project pj-m2-01, pj-m2-02의 pod 확인
     Project pj-m3-01, pj-m3-02의 pod 확인
     Project pj-mber-01, pj-mber-02의 pod 확인
     Project pj-all-01, pj-all-02의 pod 확인
  2) M-Cluster2의 work node 복원
  3) M-Cluster3의 work node 강제 다운
     Project pj-m2-01, pj-m2-02의 pod 확인
     Project pj-m3-01, pj-m3-02의 pod 확인
     Project pj-mber-01, pj-mber-02의 pod 확인
     Project pj-all-01, pj-all-02의 pod 확인
  4) M-Cluster3의 work node 복원
  5) H-Cluster1의 work node 강제 다운
     Project pj-m2-01, pj-m2-02의 pod 확인
     Project pj-m3-01, pj-m3-02의 pod 확인
     Project pj-mber-01, pj-mber-02의 pod 확인
     Project pj-all-01, pj-all-02의 pod 확인
  6) H-Cluster1의 work node 복원


7. Multi-Cluster 삭제 테스트
  1) H-Cluster1과 M-Cluster2의 클러스터 연결 삭제
     Project pj-m2-01, pj-m2-02의 pod 확인
     Project pj-m3-01, pj-m3-02의 pod 확인
     Project pj-mber-01, pj-mber-02의 pod 확인
     Project pj-all-01, pj-all-02의 pod 확인
  2) H-Cluster1과 M-Cluster3의 클러스터 연결 삭제
     Project pj-m2-01, pj-m2-02의 pod 확인
     Project pj-m3-01, pj-m3-02의 pod 확인
     Project pj-mber-01, pj-mber-02의 pod 확인
     Project pj-all-01, pj-all-02의 pod 확인
  3) 각 클러스터 연결 복원


8. Multi-Cluster 업그레이드 테스트
  1) H-Cluster1의 k8s 버전을 1.24.9로 업그레이드
     Project pj-m2-01, pj-m2-02의 pod 확인
     Project pj-m3-01, pj-m3-02의 pod 확인
     Project pj-mber-01, pj-mber-02의 pod 확인
     Project pj-all-01, pj-all-02의 pod 확인
  2) M-Cluster1의 k8s 버전을 1.24.9로 업그레이드
     Project pj-m2-01, pj-m2-02의 pod 확인
     Project pj-m3-01, pj-m3-02의 pod 확인
     Project pj-mber-01, pj-mber-02의 pod 확인
     Project pj-all-01, pj-all-02의 pod 확인















화면에서 말고 API나 기타 방법이 있는지
Host, member cluster 설정
member->host join
API 찾기
#유저 kubeconfig 가져오기
GET /kapis/resources.kubesphere.io/v1alpha2/users/{user}/kubeconfig
#클러스터 조회
GET /apis/cluster.kubesphere.io/v1alpha1/clusters
#클러스터 등록
POST /apis/cluster.kubesphere.io/v1alpha1/clusters?dryRun=<string>&fieldManager=<string>&pretty=<string>
 + JSON BODY
#클러스터 등록이 멤버연결 또한 처리하는 듯 보인다.
/apis/cluster.kubesphere.io/v1alpha1/clusters
/apis/cluster.kubesphere.io/v1alpha1/clusters
  post
    io.kubesphere.kubesphere.pkg.apis.cluster.v1alpha1.Cluster
      io.kubesphere.kubesphere.pkg.apis.cluster.v1alpha1.ClusterSpec
        io.kubesphere.kubesphere.pkg.apis.cluster.v1alpha1.Connection
          kubeconfig
          kubernetesAPIEndpoint
          kubernetesAPIServerPort
          kubesphereAPIEndpoint
          kubesphereAPIServerPort
          token
          type
정리하면, 
1. Host Cluster 설정은 kubectl edit를 사용하거나, yaml을 추출하여 수정 후 kubectl apply -f로 적용 
2. Host Cluster jwtSecret은 추출하면 되고
3. Member Cluster 설정은 kubectl edit를 사용하거나 yaml을 추출하여 수정 후 kubectl apply -f로 적용
4. Member의 Host join 처리는 /apis/cluster.kubesphere.io/v1alpha1/clusters API를 POST로 사용하여 적용
   전송용 BODY JSON에 어떤 값이 들어가야 하는지 분석 필요.
   다른 조회 API를 찾아서 데이터를 맞춰 줘야 할 것 같다.
   
   
-----------------------------------------------------------------------------------------------

테스트 확인 한 결과 추가내용 필요

#VM 스냅샷
일단 VM을 현재버전으로 스냅샷을 뜨고

#멀티클러스터 배포시
일반 kubectl deployment 로는 배포가 안되더라.  
  apiVersion: types.kubefed.io/v1beta1
  kind: FederatedDeployment
이걸 host에서 해본적은 없는데, host에서 해보자. 
host master에 fed관련 controller로 깔려있으니 될거같기도.

그리고 추가 정리 필요 
  1) 하나의 클러스터에만 4개의 pod를 배포하는 방법
  2) 2개의 클러스터에 4개의 pod를 2개씩 배포하는 방법
  3) 하나의 클러스터에만 6개의 pod를 배포하는 방법
  3) 3개의 클러스터에 6개의 pod를 2개씩 배포하는 방법

배포테스트를 좀 더 정리해볼까
ws-mber 생성 절차
  이것은 mcluster2와 mcluster3을 바운더리로 갖는 workspace인 것이여
  캡쳐

multi-cluster project pj-mber-01, pj-mber-02 생성
  kubectl로 ns가 동시에 생성 된 것을 보여주고
  UI에서 어떻게 보이는지도 보여주고

workload 생성
  kubectl로 host master에서 된다면..
  안된다면 ui에서..
  1) 하나의 클러스터에만 4개의 pod를 배포하는 방법
  2) 2개의 클러스터에 4개의 pod를 2개씩 배포하는 방법
  kubectl 결과 캡쳐
  화면 캡쳐
  labels:
    app.kubernetes.io/name: nginx  <-- 워크로드 생성시 레이블을 넣어줘보자


#멀티클러스터 HA
cluster2를 먹통만들더라도, cluster3으로 pod가 옮겨가거나 하진 않더라
멀티클러스터의 고가용성은, 
노드다운시 다른 노드로 파드가 옮겨가는, 파드의 실행을 보장하는 고가용성과는 다름.
여러 지역마다 클러스터를 운영하면서, 
각각의 클러스터에 파드를 동시에 배포했을 때,
하나의 클러스터가 다운되더라도 다른 클러스터들은 서비스가 가능한 고가용성을 의미


#멀티클러스터 삭제
클러스터 삭제
예상) 더이상 Host에서 컨트롤을 안되지만, 이미 기동되어있는 파드들은 동작한다


#클러스터 업그레이드
VM을 3G로 바꾸고
107, 109, 108, 110서버에 각각 도커 설치
hcluster1 업그레이드 후, POD들의 상태 확인
mcluster2 업그레이드 후, pod들의 상태 확인
   
   