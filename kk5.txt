#Multi-Cluster 구성

#ssh-keygen
ssh-keygen -t rsa
touch ~/.ssh/authorized_keys
chmod 755 ~/.ssh/authorized_keys


alias m1='ssh -i ~/.ssh/id_rsa kk-m1-ubuntu'
alias m2='ssh -i ~/.ssh/id_rsa kk-m2-ubuntu'
alias m3='ssh -i ~/.ssh/id_rsa kk-m3-ubuntu'
alias w1='ssh -i ~/.ssh/id_rsa kk-w1-ubuntu'
alias w2='ssh -i ~/.ssh/id_rsa kk-w2-ubuntu'
alias w3='ssh -i ~/.ssh/id_rsa kk-w3-ubuntu'
alias r1='ssh -i ~/.ssh/id_rsa kk-r1-ubuntu'
alias t1='ssh -i ~/.ssh/id_rsa kk-t1-ubuntu'

source .profile


#노드 정보
Host IP	Host Name		Usage

10.100.0.107	kk-m1-ubuntu
10.100.0.108	kk-m2-ubuntu
10.100.0.112	kk-m3-ubuntu
10.100.0.109	kk-w1-ubuntu
10.100.0.110	kk-w2-ubuntu
10.100.0.113	kk-w2-ubuntu
10.100.0.111	kk-r1-ubuntu
10.100.0.114	kk-t1-ubuntu


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Cluster3은 퍼블릭 설치
10.100.0.112	kk-m3-ubuntu	v1.24.9
10.100.0.113	kk-w2-ubuntu	v1.24.9

설치 완료
10.100.0.112:30880
192.168.219.167:30883
admin / P@88w0rd
admin / Kubesphere1


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Cluster1은 Air-gapped 설치
10.100.0.107	kk-m1-ubuntu	v1.22.12
10.100.0.109	kk-w1-ubuntu	v1.22.12
10.100.0.111	kk-r1-ubuntu


#kk-t1-ubuntu 에 있는 kk, artifact등을 master(kk-m1-ubuntu)로 복사
root@kk-t1-ubuntu:~# scp -rp kk kubekey-v3.0.7-linux-amd64.tar.gz root@kk-m1-ubuntu:/root
kk                                                                                           100%   75MB 138.6MB/s   00:00    
kubekey-v3.0.7-linux-amd64.tar.gz                                                            100%   34MB 157.8MB/s   00:00


#artifact.tar.gz를 master(kk-m1-ubuntu)로 복사
root@kk-t1-ubuntu:~# scp -rp artifact.tar.gz root@kk-m1-ubuntu:/root



# m1, w1으로 클러스터 구성
k8s v1.22.12
ks v3.3.2
./kk create config --with-kubesphere v3.3.2 --with-kubernetes v1.22.12 -f create-cluster.yaml

vi create-cluster.yaml



# 이제 클러스터 생성 해보자. 이미 하버에 푸시되어 있으니 스킵방식으로 진행
./kk create cluster -f create-cluster.yaml -a artifact.tar.gz --with-packages --skip-push-images



에러난다.
에러는 dockerhub.kubekey.local 에 로그인하려고 했는데, x509 certificate unknown authority 가 뜬 것
admin / Harbor12345 정보도 제대로 넣었으나 인증에러가 났다.


docker를 containerd로도 바꿔보고
이것저것 해보다가
docker login dockerhub.kubekey.local 도 같은에러로 안되는 것을 확인
kk-r1-ubuntu에서는 잘 되는것을 확인
kk-r1-ubuntu의  /etc/docker/certs.d 폴더를 각 m1, w1에 카피

kk-m1-ubuntu, kk-w1-ubuntu에서도 docker login dockerhub.kubekey.local 이 잘 되는것을 확인하고 다시 진행


# 인증서 처리 후 다시 시도
./kk create cluster -f create-cluster.yaml -a artifact.tar.gz --with-packages --skip-push-images

로그 쭉쭉
로그 쭉쭉

설치완료


10.100.0.107:30880
192.168.219.167:30880
admin / P@88w0rd
admin / Kubesphere1







# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Cluster2는 퍼블릭 설치
10.100.0.108	kk-m2-ubuntu	v1.22.17
10.100.0.110	kk-w2-ubuntu	v1.22.17


root@kk-m2-ubuntu:~# kubectl get nodes -o wide
NAME           STATUS   ROLES                  AGE   VERSION    INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
kk-m2-ubuntu   Ready    control-plane,master   11m   v1.22.17   10.100.0.108   <none>        Ubuntu 20.04.5 LTS   5.15.0-76-generic   containerd://1.6.4
kk-w2-ubuntu   Ready    worker                 11m   v1.22.17   10.100.0.110   <none>        Ubuntu 20.04.5 LTS   5.15.0-76-generic   containerd://1.6.4

설치 완료
10.100.0.108:30880
192.168.219.167:30882
admin / P@88w0rd
admin / Kubesphere1


























@ 에러

Waiting for all tasks to be completed ...
task network status is successful  (1/4)
task openpitrix status is successful  (2/4)
task monitoring status is successful  (3/4)
task multicluster status is failed  (4/4)
**************************************************
Collecting installation results ...


Task 'multicluster' failed:
******************************************************************************************************************************************************
{
  "counter": 65,
  "created": "2023-08-05T18:47:37.442093",
  "end_line": 67,
  "event": "runner_on_failed",
  "event_data": {
    "duration": 604.217412,
    "end": "2023-08-05T18:47:37.441981",
    "event_loop": null,
    "host": "localhost",
    "ignore_errors": null,
    "play": "localhost",
    "play_pattern": "localhost",
    "play_uuid": "1eecb4b2-5828-bd0f-b4ea-000000000005",
    "playbook": "/kubesphere/playbooks/multicluster.yaml",
    "playbook_uuid": "c298ebb8-d8f7-44f8-807c-60f13af918d5",
    "remote_addr": "127.0.0.1",
    "res": {
      "_ansible_no_log": false,
      "attempts": 10,
      "changed": true,
      "cmd": "/usr/local/bin/helm upgrade --install kubefed /kubesphere/kubesphere/kubefed/kubefed -f /kubesphere/kubesphere/kubefed/custom-values-kubefed.yaml --namespace kube-federation-system --wait --timeout 1800s\n",
      "delta": "0:00:00.132627",
      "end": "2023-08-06 03:47:37.419478",
      "invocation": {
        "module_args": {
          "_raw_params": "/usr/local/bin/helm upgrade --install kubefed /kubesphere/kubesphere/kubefed/kubefed -f /kubesphere/kubesphere/kubefed/custom-values-kubefed.yaml --namespace kube-federation-system --wait --timeout 1800s\n",
          "_uses_shell": true,
          "argv": null,
          "chdir": null,
          "creates": null,
          "executable": null,
          "removes": null,
          "stdin": null,
          "stdin_add_newline": true,
          "strip_empty_ends": true,
          "warn": true
        }
      },
      "msg": "non-zero return code",
      "rc": 1,
      "start": "2023-08-06 03:47:37.286851",
      "stderr": "Error: UPGRADE FAILED: another operation (install/upgrade/rollback) is in progress",
      "stderr_lines": [
        "Error: UPGRADE FAILED: another operation (install/upgrade/rollback) is in progress"
      ],
      "stdout": "",
      "stdout_lines": []
    },
    "resolved_action": "command",
    "role": "ks-multicluster",
    "start": "2023-08-05T18:37:33.224569",
    "task": "Kubefed | Initing kube-federation-system",
    "task_action": "command",
    "task_args": "",
    "task_path": "/kubesphere/installer/roles/ks-multicluster/tasks/main.yml:51",
    "task_uuid": "1eecb4b2-5828-bd0f-b4ea-00000000001f",
    "uuid": "06b5c04a-463a-42b4-b4f0-443fc8d82b0f"
  },
  "parent_uuid": "1eecb4b2-5828-bd0f-b4ea-00000000001f",
  "pid": 8895,
  "runner_ident": "multicluster",
  "start_line": 66,
  "stdout": "fatal: [localhost]: FAILED! => {\"attempts\": 10, \"changed\": true, \"cmd\": \"/usr/local/bin/helm upgrade --install kubefed /kubesphere/kubesphere/kubefed/kubefed -f /kubesphere/kubesphere/kubefed/custom-values-kubefed.yaml --namespace kube-federation-system --wait --timeout 1800s\\n\", \"delta\": \"0:00:00.132627\", \"end\": \"2023-08-06 03:47:37.419478\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2023-08-06 03:47:37.286851\", \"stderr\": \"Error: UPGRADE FAILED: another operation (install/upgrade/rollback) is in progress\", \"stderr_lines\": [\"Error: UPGRADE FAILED: another operation (install/upgrade/rollback) is in progress\"], \"stdout\": \"\", \"stdout_lines\": []}",
  "uuid": "06b5c04a-463a-42b4-b4f0-443fc8d82b0f"
}
******************************************************************************************************************************************************




# Cluster1에 Host Cluster 세팅

 kubectl edit cc ks-installer -n kubesphere-system
 clusterRole: host
 hostClusterName: hcluster1  <--- 요거 이름 대문자 특수문자 안되는듯
 
 kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l 'app in (ks-install, ks-installer)' -o jsonpath='{.items[0].metadata.name}') -f
	 




kube-federation-system         kubefed-admission-webhook-6f9f5dcbbf-mgscx         1/1     Running   0               3m31s
kube-federation-system         kubefed-controller-manager-77fbf668b8-t94kg        1/1     Running   0               2m59s
kubesphere-system              tower-786bb99f5d-cnzkj                             1/1     Running   0               3m41s

3개의 파드가 추가로 생기는데
Pending 된다.
메모리 부족인건지.. VM사양 부족인건지

그래서 
kubesphere-monitoring-system   prometheus-k8s-0                                   0/2     Pending
를 죽여서 위의 3개 파드는 생성되고
prometheus-k8s-0 는 Pending되게 만들었다.

prometheus-k8s-0을 지우니, 노드, 파드 현황이 안보여서
kubesphere-monitoring-system   alertmanager-main-0                                0/2     Pending   0
를 지우는것으로 해봄




# Cluster2에 Member Cluster 세팅
멤버설정할 때는 Pending 되는 것은 없더라
host 설정과는 다르게 kube-federation-system 과 tower pod가 추가되거나 하진 않아서 그런 것 같음

kubectl edit cc ks-installer -n kubesphere-system
jwtSecret: 1bCScmByJYU13hm6MwIBnEwCuQ1Ofwa8
clusterRole: member





# Cluster3에 Member Cluster 세팅
Cluster3는 다른 PC에 설정함. 노트북의 사양이 딸려서 3번째 클러스터를 올리는 것은 불가능하더라
Cluster3 역시 VM으로 올렸고
Cluster1 master에서 Cluster3 master로 접근 할 수 있게 port-forwarding 처리 함


kubectl edit cc ks-installer -n kubesphere-system
jwtSecret: 1bCScmByJYU13hm6MwIBnEwCuQ1Ofwa8
clusterRole: member



Start installing monitoring
Start installing multicluster
Start installing openpitrix
Start installing network
**************************************************
Waiting for all tasks to be completed ...
task network status is successful  (1/4)
task openpitrix status is successful  (2/4)
task multicluster status is successful  (3/4)
task monitoring status is successful  (4/4)
**************************************************
Collecting installation results ...
#####################################################
###              Welcome to KubeSphere!           ###
#####################################################

Console: http://10.100.0.112:30880
Account: admin
Password: P@88w0rd
NOTES：
  1. After you log into the console, please check the
     monitoring status of service components in
     "Cluster Management". If any service is not
     ready, please wait patiently until all components 
     are up and running.
  2. Please change the default password after login.

#####################################################
https://kubesphere.io             2023-08-06 16:14:55
####################################################



# 이제 Add Cluster 해보자






Get "https://192.168.219.146:6443/api/v1/namespaces/kube-system?timeout=10s": x509: certificate is valid for 10.233.0.1, 10.100.0.112, 127.0.0.1, 10.100.0.113, not 192.168.219.146

악.. 서로 다른 네트워크 대역대여서
Cluster3의 kubeconfig 가져올때 에러가 난다.

요걸 참고해서
https://happycloud-lee.tistory.com/235
kubeconfig에 허용 ip를 추가하자


된다.. 눈물 ㅠㅠ







******************************************************************************************************************************************************


# Cluster2(mcluster1)의 버전을 v1.22.17 에서 v1.24.9로 upgrade

업그레이드를 위해 도커를 설치하자. kk-m2-ubuntu와 kk-w2-ubuntu에 각각 설치

apt-get update
apt-get install ca-certificates gnupg lsb-release

Add Docker’s official GPG key
  sudo mkdir -p /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

Set up the repository:
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

Install Docker Engine
  sudo apt-get update
  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin

 
# cluster 업그레이드. kk-m2-ubuntu에서 실행
# kubekey로 kubernetes의 버전을 v1.22.17 에서 v1.24.9 로 업그레이드


./kk create config --from-cluster 로 구성 파일 생성
mv sample.yaml upgrade-cluster.yaml

vi upgrade-cluster.yaml  <---- ssh 정보, 버전정보, etcd 정보 수정하고 


./kk upgrade --with-kubernetes v1.24.9  -f upgrade-cluster.yaml


어어어...에러?? 
panic: illegal version string "24..5"

goroutine 198 [running]:
k8s.io/apimachinery/pkg/util/version.MustParseSemantic({0xc00096a970?, 0x6?})
	k8s.io/apimachinery@v0.25.4/pkg/util/version/version.go:119 +0x45
github.com/kubesphere/kubekey/v3/cmd/kk/pkg/bootstrap/confirm.(*UpgradeConfirm).Execute(0xc0001c2af8, {0x27545f0, 0xc000331200})
	github.com/kubesphere/kubekey/v3/cmd/kk/pkg/bootstrap/confirm/tasks.go:218 +0xddf
github.com/kubesphere/kubekey/v3/cmd/kk/pkg/core/task.(*LocalTask).ExecuteWithRetry(0xc0000cafd0, {0x27545f0, 0xc000331200}, {0x275a6f8, 0xc00022f980})
	github.com/kubesphere/kubekey/v3/cmd/kk/pkg/core/task/local_task.go:205 +0x126
github.com/kubesphere/kubekey/v3/cmd/kk/pkg/core/task.(*LocalTask).Run(0xc0000cafd0, {0x27545f0, 0xc000331200}, {0x275a6f8?, 0xc00022f980}, 0x0?)
	github.com/kubesphere/kubekey/v3/cmd/kk/pkg/core/task/local_task.go:159 +0x225
created by github.com/kubesphere/kubekey/v3/cmd/kk/pkg/core/task.(*LocalTask).RunWithTimeout
	github.com/kubesphere/kubekey/v3/cmd/kk/pkg/core/task/local_task.go:121 +0x172


도커때문인가 최신 도커로 설치했을 때 24.05 버전이었음
도커 다시 지우고 20.10 버전으로 다시 설치해보자
24.05 버전.. 왠지 찝찝하다


도커 설치가능버전 확인
apt-cache madison docker-ce

20.10의 마지막버전으로 해보자

apt-get install docker-ce=5:20.10.24~3-0~ubuntu-focal docker-ce-cli=5:20.10.24~3-0~ubuntu-focal containerd.io docker-compose-plugin

docker --version 하니 20.10 으로 나오고


업그레이드 재도전
./kk upgrade --with-kubernetes v1.24.9  -f upgrade-cluster.yaml


아까와는 다르게 진행되는 듯.




******************************************************************************************************************************************************


# Cluster2(mcluster1)의 버전을 v1.22.17 에서 v1.24.9로 upgrade

업그레이드를 위해 도커를 설치하자. 20.10 버전으로 설치 할 것이다
kk-m1-ubuntu와 kk-w1-ubuntu에 각각 설치


apt-get update
apt-get install ca-certificates gnupg lsb-release

Add Docker’s official GPG key
  sudo mkdir -p /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

Set up the repository:
  echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

Install Docker Engine
  apt-get update

도커 설치가능버전 확인
apt-cache madison docker-ce

20.10의 마지막버전으로 해보자
apt-get install docker-ce=5:20.10.24~3-0~ubuntu-focal docker-ce-cli=5:20.10.24~3-0~ubuntu-focal containerd.io docker-compose-plugin

docker --version 하니 20.10 으로 나오고






# cluster 업그레이드. kk-m2-ubuntu에서 실행
# kubekey로 kubernetes의 버전을 v1.22.17 에서 v1.24.9 로 업그레이드


./kk create config --from-cluster 로 구성 파일 생성
mv sample.yaml upgrade-cluster.yaml

vi upgrade-cluster.yaml  <---- ssh 정보, 버전정보, etcd 정보 수정하고 
  - {name: kk-m1-ubuntu, address: 10.100.0.107, privateKeyPath: "~/.ssh/id_rsa"}
  - {name: kk-w1-ubuntu, address: 10.100.0.109, privateKeyPath: "~/.ssh/id_rsa"}
  etcd:
    - kk-m1-ubuntu
    control-plane:
    - kk-m1-ubuntu
    worker:
    - kk-w1-ubuntu

./kk upgrade --with-kubernetes v1.24.9  -f upgrade-cluster.yaml

성공

root@kk-m1-ubuntu:~# kubectl get nodes -o wide
NAME           STATUS   ROLES           AGE    VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
kk-m1-ubuntu   Ready    control-plane   7d7h   v1.24.9   10.100.0.107   <none>        Ubuntu 20.04.5 LTS   5.15.0-78-generic   containerd://1.6.4
kk-w1-ubuntu   Ready    worker          7d7h   v1.24.9   10.100.0.109   <none>        Ubuntu 20.04.5 LTS   5.15.0-78-generic   containerd://1.6.4



******************************************************************************************************************************************************
#API 서버를 노드포트로 노출시키자.
kubectl -n kubesphere-system get svc
kubectl -n kubesphere-system patch service ks-apiserver -p '{"spec":{"type":"NodePort"}}'

#노드 포트를 내가 원하는 포트로 변경
kubectl edit -n kubesphere-system get svc ks-apiserver

#테스트
curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \
 'http://10.100.0.107:30780/oauth/token' \
  --data-urlencode 'grant_type=password' \
  --data-urlencode 'username=admin' \
  --data-urlencode 'password=Kubesphere1' \
  --data-urlencode 'client_id=kubesphere' \
  --data-urlencode 'client_secret=kubesphere'
{
 "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2OTE5MTEzNTEsImlzcyI6Imt1YmVzcGhlcmUiLCJzdWIiOiJhZG1pbiIsInRva2VuX3R5cGUiOiJhY2Nlc3NfdG9rZW4iLCJ1c2VybmFtZSI6ImFkbWluIn0.fp1ymqQRsnp3569O3cltVjuapCGTCjWXXWlrzzG0agI",
 "token_type": "Bearer",
 "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2OTE5MTEzNTEsImlzcyI6Imt1YmVzcGhlcmUiLCJzdWIiOiJhZG1pbiIsInRva2VuX3R5cGUiOiJyZWZyZXNoX3Rva2VuIiwidXNlcm5hbWUiOiJhZG1pbiJ9.whbbQ9-tMRp6ctsdnwQBbpkpkh7Zity5O6HvZcW9y4U"
}








connect edit yaml
apiVersion: cluster.kubesphere.io/v1alpha1
kind: Cluster
spec:
  provider: ''
  connection:
    type: direct
    kubeconfig: "apiVersion: v1\r\nclusters:\r\n- cluster:\r\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1EZ3dNekUyTXpJME1sb1hEVE16TURjek1URTJNekkwTWxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHI4Ck9sckVrYjdOc0VUWm15dFY5NllwbU1VbHI2eHRIdjltVENDbHNVWUIvT1VTODRYcm0yc1ZJRDFjTCtxZm9ENW8KeWpybGcycVZ1S2JtdHdjYlBFRWZid0hSckErbHVZL1IrSE1Qd0YrZzlPR21aYW9DVDFHVVdibUxhbjQzd3VqRApKUTl6aThhaFZTRDd1VnZ0UDBKVHc4QzRmN1ZyekhOVjR4aFE1cCtSVloweERucXNzZmJVOS9nK0JVWW44ZkViCnc0NHl2ZjRnS0c2ZjFxa0FWamFhNHNiNTNmTVpIOXZoLzNjVWU2Q3Z6NTlJbUI2R3ZUSlZvR0tmTlNRTXJMbUUKN0dPZU03dHhBTm5HNFdmYnJVdGQ2ZkpzZEVPdFJlelZnbjZxZmRjczRWY0xrdVV3aGNYTTlYR1pmTDRnaEMrTQpCdDhRSllBWXdvQ0pQWlpzSVNNQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZJWmNiSVdzU09hUWRmcmVsdlEyeVl0Z0JaMjBNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSHZONWNHZGtueloyQ0lpaUp2VgpQMVB5TWlsTXQ5MWNNeVV6bk41QjhZRWovelRxTERjMnF2SUk0YlJGRk9ldkV1MUgwcWd3Rzh2SjczQnRST1pJClJwaEZhSWlFckswbHBSUUtaQ3RNVGdUQmtVWGtSMTNmcmNQYkRHOWkrVHdvRWovNkUrdzVGcTEreUYybWlwRXcKUkp4YnJGejdKZ2pmbHZkcGlKdmtDeXE2b2o0Z2tZb3BURkFMYXVxNjdCbnRCR1owbU1vNmFrWFd4bncyWTY5YgpPVnBsS1o5TmUzYXZEaVZQLzZOYnNYaUo5WUZTSVJlL3NaWGdNVWNTTVNFSkpmMG9mdlJLM2pKQWhITGErdk12CnJCazdnSzRIaUxSbnlvOVVEdDUwZTMya3VpTVZ6S2ZyajZQVGpzcm9YcXhDT3dyL2ovRDYya0dYZnNKeTRTckUKRlBZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\r\n    server: https://10.100.0.108:6443\r\n  name: cluster.local\r\ncontexts:\r\n- context:\r\n    cluster: cluster.local\r\n    user: kubernetes-admin\r\n  name: kubernetes-admin@cluster.local\r\ncurrent-context: kubernetes-admin@cluster.local\r\nkind: Config\r\npreferences: {}\r\nusers:\r\n- name: kubernetes-admin\r\n  user:\r\n    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJVENDQWdtZ0F3SUJBZ0lJVUdLREEvd25MMzR3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TXpBNE1ETXhOak15TkRKYUZ3MHlOREE0TURjeE16TTRNRFJhTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXNtT3VvSUNoSVhGVDlFZkoKNTROYkdLU1l2ZG5MYVo2T0VnK2ZKNDFrNWJOZ3NKb0N4TFNnMVRCc25MZ0ZLZms1VUNYMGlhNFpiK2UraXBudQo4clVRV0FqYzRnZys1bStjTWZDOGlvYWRTdi9TR29jK24xdnA5bVRVSHExaGJrSnJoMC9xSjRhMHhJUmhTVGlQCnJnV3g1c3hiN3FpaDc1czRHKzIyZTJ1NFZBblRmL0VNa243SnJlMDM4cVRaYStUdFVIendOQnpqR2t0K1dCM2IKY29URGU1eWJEaUptNVVkSndrSmF5Um1TaVFhM3JSb0xjaUNqMFkyUnZGTWpsc0VpWVJyaVRsd2hGVnV2KzY3SApXR3BOaWJyVW1Nd2lhSmdsRTVQQllMUzlIRHRtRzVCZ0xFN1gvVkp3MjdkVEJyWmpEaGJTeUdUektNWEUxYXh6ClBKT0hxd0lEQVFBQm8xWXdWREFPQmdOVkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUgKQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JTR1hHeUZyRWpta0hYNjNwYjBOc21MWUFXZAp0REFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBUmJROGUyQzlOTklaK0lxT2JOME1uejBVVEpkSnRac1NsQURZClo0VEI5WUs0SlZzeGhpb2V2MmlLZ3Z3MjJTOFplQnFYak1BUTdnOTBwZS81STlVSlE3a0tuWkdBc05TZnNiS3oKdEt2YlFiTG1tUkpRZFlhWW9HZVdpemhjZ2RIQ0R3R20rMDNHcitwR3ZuSXdvYXorTklJclNtbm1SRXB3SU01NgpDL1VLR1A2OHZQVTArWEZmWDRjSFdLcDErRzN1dHFucmpWYjFlNXV4M1dYRmZua3VlZnVHVXUwZkU5UUQ3VVhKCmt3ZHVVK29WVEpTZDBIQWdEd0VnenBOSC8zbTBRVFhRdXhyLy8yNHdYL3FUY1RXVUVyaWV4bUZkeGJjcmpCR0cKZ2JWZkVUTUV0SHdick14RE9EZWVFM2hHYkZyQkRxVzRVQ0VHcEFnakZSTFd0TlVWa2c9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\r\n    client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc21PdW9JQ2hJWEZUOUVmSjU0TmJHS1NZdmRuTGFaNk9FZytmSjQxazViTmdzSm9DCnhMU2cxVEJzbkxnRktmazVVQ1gwaWE0WmIrZStpcG51OHJVUVdBamM0Z2crNW0rY01mQzhpb2FkU3YvU0dvYysKbjF2cDltVFVIcTFoYmtKcmgwL3FKNGEweElSaFNUaVByZ1d4NXN4YjdxaWg3NXM0RysyMmUydTRWQW5UZi9FTQprbjdKcmUwMzhxVFphK1R0VUh6d05CempHa3QrV0IzYmNvVERlNXliRGlKbTVVZEp3a0pheVJtU2lRYTNyUm9MCmNpQ2owWTJSdkZNamxzRWlZUnJpVGx3aEZWdXYrNjdIV0dwTmliclVtTXdpYUpnbEU1UEJZTFM5SER0bUc1QmcKTEU3WC9WSncyN2RUQnJaakRoYlN5R1R6S01YRTFheHpQSk9IcXdJREFRQUJBb0lCQUUzSHR0bFduR3IzZmRLUwpCby9DTDFNVVdXRFYrS0lwdHVwYkUxcnNoS1MrekpiVDRBY2lkc25kbmszSzByMlZaQTcxTGFWbVdzTDNPWlkzClBmOW5RU1FSWVRYUXdKUTY3OUM2bFlxVTNUcFpScU80ZW02RFpnUy91OWxRWVozd3FlL0t3VjdRbGpybE9ZSHkKZm5zekVubCtlMHNaRGRwcVJGR3hHUkxCU2hLaHA5Ry9udnhCcWZqc3p2RVJRQ29YQUx0Q1NzM0c4U1VRbW84bQp5c1c4MEVLMU45anVMSm11akVKT0lNTDNweFlTUGNERmxtMkxsY0F3TU5KbmlOOTlsdHl4WlZZQitsVWdFdGFBCjZONHpuMWhFQW9EaU1LMjJwUlZzcHBCeDhmV2RBQ1BvTHB3M0Y4cHVIV0MrUUFyaGJOMmFsaDAzRGNsRTZWQVQKLzBrRTE3RUNnWUVBMXNHNklKOE5nRStsblVtYkVrSndOR0tGM3F1Q0tYZmV0eTd6LzBPMWtQbTU4VU42VkphagpHTXVONmZDaWxDREtYU05FM1dxU0lUNlFTSk9tMlFlbTZ2ZjlZeWc0QlFBVnRLb1NlU21QWUxWclNwYjB3KzFOClhzQUZQNHV4U1N4bExiMU53UE1XUTdNeEF6bGQxUnRNWUl3RFNmUkZCRTNXdUkyTXdqK0JkR2tDZ1lFQTFLWCsKcDBGZXVNUkZBZHZYbjhSRjJlTU5rRTBYdzlJV29mdlBmaGVKdEFvRkw1QjFub3ExbHdaS01tUnhrSEI3NUVFVApHZzhabGNac1FCaWJScDNxajU0QmtsT0t0blBnSU9lemNWOWM5VmRkOG5FYXQ0WllMZFBsSHloNmsxTGk4L1dDCmw3cjNWelFIcFhWT3d0U0MwYmZBL1dtTVk2UHBPbnVXL0F2QXlQTUNnWUFNMVE2V0hHcm1HOXc5aGNScVZ1WDEKZTEyY2JJc2VoemNib3dhWlhpWmZQMHpKQ2NzcGVzYk1HSDJtV09hZUMwZU1RU3RBUDduem1wVnNnTVliZWNXVApqTFhyVXQvbURKYy9jRm9pTzBXQjlkVXZZODNFVjAya043MFlpdlJROXdJa3RZY0wzSHFjR1B6NHdGakcveGFWClBraUVCc0NJL1UyelFXSUR5VittNFFLQmdGcnUxUE8rNzN1QmFxVDkxcm9hVzJodVFLbVpYZlUrRExHZUZiK3MKM3hUZlNCSnI2dkF1RHJNVFhIMHFHS29VZjlZK3dhVmVHYW5EblJ6WHFPYk10clpOY2d5WnJ2S1FvS0pSa3BtRApseVBQQlh5Y1F6bUJ1SWw0V0QwM3VScncwZDVTK1ZKYkFGUUpDdEFGVnZYWG5FMkVENElPTlp1U1J6VGNEdGVmClN3UmpBb0dCQU1KUVR0S2x6OElFTWFBMk9GbXB2aGdCeDFVbEpOb3VHQTVqSjROQ1pqVHhVL25raWYvQjgwMTYKcURFY04rVEw2VUJ6NUNzYXlpRkE5VUcwbUplYVpDdGZqbGFDM3dvOVM0S1VMVEtxbnU3TGNMUzh4OEk2c1k4bQpYWWdyVTluUVd1RDE1NkNnK2tXOWxtbGxuRjg0eHMzOVVuVVRXTHVabUprcWl5UCt2VGZ1Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  joinFederation: true
metadata:
  name: mcluster2
  labels:
    cluster.kubesphere.io/group: demo
  annotations:
    kubesphere.io/description: connect on admin

BASE64
YXBpVmVyc2lvbjogdjFcclxuY2x1c3RlcnM6XHJcbi0gY2x1c3RlcjpcclxuICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNdmFrTkRRV1ZoWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplazFFWjNkTmVrVXlUWHBKTUUxc2IxaEVWRTE2VFVSamVrMVVSVEpOZWtrd1RXeHZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVEhJNENrOXNja1ZyWWpkT2MwVlVXbTE1ZEZZNU5sbHdiVTFWYkhJMmVIUklkamx0VkVORGJITlZXVUl2VDFWVE9EUlljbTB5YzFaSlJERmpUQ3R4Wm05RU5XOEtlV3B5YkdjeWNWWjFTMkp0ZEhkallsQkZSV1ppZDBoU2NrRXJiSFZaTDFJclNFMVFkMFlyWnpsUFIyMWFZVzlEVkRGSFZWZGliVXhoYmpRemQzVnFSQXBLVVRsNmFUaGhhRlpUUkRkMVZuWjBVREJLVkhjNFF6Um1OMVp5ZWtoT1ZqUjRhRkUxY0N0U1Zsb3dlRVJ1Y1hOelptSlZPUzluSzBKVldXNDRaa1ZpQ25jME5IbDJaalJuUzBjMlpqRnhhMEZXYW1GaE5ITmlOVE5tVFZwSU9YWm9Mek5qVldVMlEzWjZOVGxKYlVJMlIzWlVTbFp2UjB0bVRsTlJUWEpNYlVVS04wZFBaVTAzZEhoQlRtNUhORmRtWW5KVmRHUTJaa3B6WkVWUGRGSmxlbFpuYmpaeFptUmpjelJXWTB4cmRWVjNhR05ZVFRsWVIxcG1URFJuYUVNclRRcENkRGhSU2xsQldYZHZRMHBRV2xwelNWTk5RMEYzUlVGQllVNWFUVVpqZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVRTRSMEV4VldSRmQwVkNDaTkzVVVaTlFVMUNRV1k0ZDBoUldVUldVakJQUWtKWlJVWkpXbU5pU1ZkelUwOWhVV1JtY21Wc2RsRXllVmwwWjBKYU1qQk5RbFZIUVRGVlpFVlJVVThLVFVGNVEwTnRkREZaYlZaNVltMVdNRnBZVFhkRVVWbEtTMjlhU1doMlkwNUJVVVZNUWxGQlJHZG5SVUpCU0haT05XTkhaR3R1ZWxveVEwbHBhVXAyVmdwUU1WQjVUV2xzVFhRNU1XTk5lVlY2Yms0MVFqaFpSV292ZWxSeFRFUmpNbkYyU1VrMFlsSkdSazlsZGtWMU1VZ3djV2QzUnpoMlNqY3pRblJTVDFwSkNsSndhRVpoU1dsRmNrc3diSEJTVVV0YVEzUk5WR2RVUW10VldHdFNNVE5tY21OUVlrUkhPV2tyVkhkdlJXb3ZOa1VyZHpWR2NURXJlVVl5Yldsd1JYY0tVa3A0WW5KR2VqZEtaMnBtYkhaa2NHbEtkbXREZVhFMmIybzBaMnRaYjNCVVJrRk1ZWFZ4TmpkQ2JuUkNSMW93YlUxdk5tRnJXRmQ0Ym5jeVdUWTVZZ3BQVm5Cc1MxbzVUbVV6WVhaRWFWWlFMelpPWW5OWWFVbzVXVVpUU1ZKbEwzTmFXR2ROVldOVFRWTkZTa3BtTUc5bWRsSkxNMnBLUVdoSVRHRXJkazEyQ25KQ2F6ZG5TelJJYVV4U2JubHZPVlZFZERVd1pUTXlhM1ZwVFZaNlMyWnlhalpRVkdwemNtOVljWGhEVDNkeUwyb3ZSRFl5YTBkWVpuTktlVFJUY2tVS1JsQlpQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09XHJcbiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTAuMTAwLjAuMTA4OjY0NDNcclxuICBuYW1lOiBjbHVzdGVyLmxvY2FsXHJcbmNvbnRleHRzOlxyXG4tIGNvbnRleHQ6XHJcbiAgICBjbHVzdGVyOiBjbHVzdGVyLmxvY2FsXHJcbiAgICB1c2VyOiBrdWJlcm5ldGVzLWFkbWluXHJcbiAgbmFtZToga3ViZXJuZXRlcy1hZG1pbkBjbHVzdGVyLmxvY2FsXHJcbmN1cnJlbnQtY29udGV4dDoga3ViZXJuZXRlcy1hZG1pbkBjbHVzdGVyLmxvY2FsXHJcbmtpbmQ6IENvbmZpZ1xyXG5wcmVmZXJlbmNlczoge31cclxudXNlcnM6XHJcbi0gbmFtZToga3ViZXJuZXRlcy1hZG1pblxyXG4gIHVzZXI6XHJcbiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkpWRU5EUVdkdFowRjNTVUpCWjBsSlZVZExSRUV2ZDI1TU16UjNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRWGRHVkVWVVRVSkZSMEV4VlVVS1FYaE5TMkV6Vm1sYVdFcDFXbGhTYkdONlFXVkdkekI1VFhwQk5FMUVUWGhPYWsxNVRrUktZVVozTUhsT1JFRTBUVVJqZUUxNlRUUk5SRkpoVFVSUmVBcEdla0ZXUW1kT1ZrSkJiMVJFYms0MVl6TlNiR0pVY0hSWldFNHdXbGhLZWsxU2EzZEdkMWxFVmxGUlJFVjRRbkprVjBwc1kyMDFiR1JIVm5wTVYwWnJDbUpYYkhWTlNVbENTV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVU5RFFWRTRRVTFKU1VKRFowdERRVkZGUVhOdFQzVnZTVU5vU1ZoR1ZEbEZaa29LTlRST1lrZExVMWwyWkc1TVlWbzJUMFZuSzJaS05ERnJOV0pPWjNOS2IwTjRURk5uTVZSQ2MyNU1aMFpMWm1zMVZVTllNR2xoTkZwaUsyVXJhWEJ1ZFFvNGNsVlJWMEZxWXpSblp5czFiU3RqVFdaRE9HbHZZV1JUZGk5VFIyOWpLMjR4ZG5BNWJWUlZTSEV4YUdKclNuSm9NQzl4U2pSaE1IaEpVbWhUVkdsUUNuSm5WM2cxYzNoaU4zRnBhRGMxY3pSSEt6SXlaVEoxTkZaQmJsUm1MMFZOYTI0M1NuSmxNRE00Y1ZSYVlTdFVkRlZJZW5kT1FucHFSMnQwSzFkQ00ySUtZMjlVUkdVMWVXSkVhVXB0TlZWa1NuZHJTbUY1VW0xVGFWRmhNM0pTYjB4amFVTnFNRmt5VW5aR1RXcHNjMFZwV1ZKeWFWUnNkMmhHVm5WMkt6WTNTQXBYUjNCT2FXSnlWVzFOZDJsaFNtZHNSVFZRUWxsTVV6bElSSFJ0UnpWQ1oweEZOMWd2VmtwM01qZGtWRUp5V21wRWFHSlRlVWRVZWt0TldFVXhZWGg2Q2xCS1QwaHhkMGxFUVZGQlFtOHhXWGRXUkVGUFFtZE9Wa2hST0VKQlpqaEZRa0ZOUTBKaFFYZEZkMWxFVmxJd2JFSkJkM2REWjFsSlMzZFpRa0pSVlVnS1FYZEpkMFJCV1VSV1VqQlVRVkZJTDBKQlNYZEJSRUZtUW1kT1ZraFRUVVZIUkVGWFowSlRSMWhIZVVaeVJXcHRhMGhZTmpOd1lqQk9jMjFNV1VGWFpBcDBSRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZCVDBOQlVVVkJVbUpST0dVeVF6bE9Ua2xhSzBseFQySk9NRTF1ZWpCVlZFcGtTblJhYzFOc1FVUlpDbG8wVkVJNVdVczBTbFp6ZUdocGIyVjJNbWxMWjNaM01qSlRPRnBsUW5GWWFrMUJVVGRuT1RCd1pTODFTVGxWU2xFM2EwdHVXa2RCYzA1VFpuTmlTM29LZEV0MllsRmlURzF0VWtwUlpGbGhXVzlIWlZkcGVtaGpaMlJJUTBSM1IyMHJNRE5IY2l0d1IzWnVTWGR2WVhvclRrbEpjbE50Ym0xU1JYQjNTVTAxTmdwREwxVkxSMUEyT0haUVZUQXJXRVptV0RSalNGZExjREVyUnpOMWRIRnVjbXBXWWpGbE5YVjRNMWRZUm1adWEzVmxablZIVlhVd1prVTVVVVEzVlZoS0NtdDNaSFZWSzI5V1ZFcFRaREJJUVdkRWQwVm5lbkJPU0M4emJUQlJWRmhSZFhoeUx5OHlOSGRZTDNGVVkxUlhWVVZ5YVdWNGJVWmtlR0pqY21wQ1IwY0taMkpXWmtWVVRVVjBTSGRpY2sxNFJFOUVaV1ZGTTJoSFlrWnlRa1J4VnpSVlEwVkhjRUZuYWtaU1RGZDBUbFZXYTJjOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT1cclxuICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjNkSlFrRkJTME5CVVVWQmMyMVBkVzlKUTJoSldFWlVPVVZtU2pVMFRtSkhTMU5aZG1SdVRHRmFOazlGWnl0bVNqUXhhelZpVG1kelNtOURDbmhNVTJjeFZFSnpia3huUmt0bWF6VlZRMWd3YVdFMFdtSXJaU3RwY0c1MU9ISlZVVmRCYW1NMFoyY3JOVzByWTAxbVF6aHBiMkZrVTNZdlUwZHZZeXNLYmpGMmNEbHRWRlZJY1RGb1ltdEtjbWd3TDNGS05HRXdlRWxTYUZOVWFWQnlaMWQ0TlhONFlqZHhhV2czTlhNMFJ5c3lNbVV5ZFRSV1FXNVVaaTlGVFFwcmJqZEtjbVV3TXpoeFZGcGhLMVIwVlVoNmQwNUNlbXBIYTNRclYwSXpZbU52VkVSbE5YbGlSR2xLYlRWVlpFcDNhMHBoZVZKdFUybFJZVE55VW05TUNtTnBRMm93V1RKU2RrWk5hbXh6UldsWlVuSnBWR3gzYUVaV2RYWXJOamRJVjBkd1RtbGljbFZ0VFhkcFlVcG5iRVUxVUVKWlRGTTVTRVIwYlVjMVFtY0tURVUzV0M5V1NuY3lOMlJVUW5KYWFrUm9ZbE41UjFSNlMwMVlSVEZoZUhwUVNrOUljWGRKUkVGUlFVSkJiMGxDUVVVelNIUjBiRmR1UjNJelptUkxVd3BDYnk5RFRERk5WVmRYUkZZclMwbHdkSFZ3WWtVeGNuTm9TMU1yZWtwaVZEUkJZMmxrYzI1a2Jtc3pTekJ5TWxaYVFUY3hUR0ZXYlZkelRETlBXbGt6Q2xCbU9XNVJVMUZTV1ZSWVVYZEtVVFkzT1VNMmJGbHhWVE5VY0ZwU2NVODBaVzAyUkZwblV5OTFPV3hSV1ZvemQzRmxMMHQzVmpkUmJHcHliRTlaU0hrS1ptNXpla1Z1YkN0bE1ITmFSR1J3Y1ZKR1IzaEhVa3hDVTJoTGFIQTVSeTl1ZG5oQ2NXWnFjM3AyUlZKUlEyOVlRVXgwUTFOek0wYzRVMVZSYlc4NGJRcDVjMWM0TUVWTE1VNDVhblZNU20xMWFrVktUMGxOVEROd2VGbFRVR05FUm14dE1reHNZMEYzVFU1S2JtbE9PVGxzZEhsNFdsWlpRaXRzVldkRmRHRkJDalpPTkhwdU1XaEZRVzlFYVUxTE1qSndVbFp6Y0hCQ2VEaG1WMlJCUTFCdlRIQjNNMFk0Y0hWSVYwTXJVVUZ5YUdKT01tRnNhREF6UkdOc1JUWldRVlFLTHpCclJURTNSVU5uV1VWQk1YTkhOa2xLT0U1blJTdHNibFZ0WWtWclNuZE9SMHRHTTNGMVEwdFlabVYwZVRkNkx6QlBNV3RRYlRVNFZVNDJWa3BoYWdwSFRYVk9ObVpEYVd4RFJFdFlVMDVGTTFkeFUwbFVObEZUU2s5dE1sRmxiVFoyWmpsWmVXYzBRbEZCVm5STGIxTmxVMjFRV1V4V2NsTndZakIzS3pGT0NsaHpRVVpRTkhWNFUxTjRiRXhpTVU1M1VFMVhVVGROZUVGNmJHUXhVblJOV1VsM1JGTm1Va1pDUlROWGRVa3lUWGRxSzBKa1IydERaMWxGUVRGTFdDc0tjREJHWlhWTlVrWkJaSFpZYmpoU1JqSmxUVTVyUlRCWWR6bEpWMjltZGxCbWFHVktkRUZ2Umt3MVFqRnViM0V4YkhkYVMwMXRVbmhyU0VJM05VVkZWQXBIWnpoYWJHTmFjMUZDYVdKU2NETnhhalUwUW10c1QwdDBibEJuU1U5bGVtTldPV001Vm1Sa09HNUZZWFEwV2xsTVpGQnNTSGxvTm1zeFRHazRMMWREQ213M2NqTldlbEZJY0ZoV1QzZDBVME13WW1aQkwxZHRUVmsyVUhCUGJuVlhMMEYyUVhsUVRVTm5XVUZOTVZFMlYwaEhjbTFIT1hjNWFHTlNjVloxV0RFS1pURXlZMkpKYzJWb2VtTmliM2RoV2xocFdtWlFNSHBLUTJOemNHVnpZazFIU0RKdFYwOWhaVU13WlUxUlUzUkJVRGR1ZW0xd1ZuTm5UVmxpWldOWFZBcHFURmh5VlhRdmJVUktZeTlqUm05cFR6QlhRamxrVlhaWk9ETkZWakF5YTA0M01GbHBkbEpST1hkSmEzUlpZMHd6U0hGalIxQjZOSGRHYWtjdmVHRldDbEJyYVVWQ2MwTkpMMVV5ZWxGWFNVUjVWaXR0TkZGTFFtZEdjblV4VUU4ck56TjFRbUZ4VkRreGNtOWhWekpvZFZGTGJWcFlabFVyUkV4SFpVWmlLM01LTTNoVVpsTkNTbkkyZGtGMVJISk5WRmhJTUhGSFMyOVZaamxaSzNkaFZtVkhZVzVFYmxKNldIRlBZazEwY2xwT1kyZDVXbkoyUzFGdlMwcFNhM0J0UkFwc2VWQlFRbGg1WTFGNmJVSjFTV3cwVjBRd00zVlNjbmN3WkRWVEsxWktZa0ZHVVVwRGRFRkdWblpZV0c1Rk1rVkVORWxQVGxwMVUxSjZWR05FZEdWbUNsTjNVbXBCYjBkQ1FVMUtVVlIwUzJ4Nk9FbEZUV0ZCTWs5R2JYQjJhR2RDZURGVmJFcE9iM1ZIUVRWcVNqUk9RMXBxVkhoVkwyNXJhV1l2UWpnd01UWUtjVVJGWTA0clZFdzJWVUo2TlVOellYbHBSa0U1VlVjd2JVcGxZVnBEZEdacWJHRkRNM2R2T1ZNMFMxVk1WRXR4Ym5VM1RHTk1Vemg0T0VrMmMxazRiUXBZV1dkeVZUbHVVVmQxUkRFMU5rTm5LMnRYT1d4dGJHeHVSamcwZUhNek9WVnVWVlJYVEhWYWJVcHJjV2w1VUN0MlZHWjFDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQ==

YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNdmFrTkRRV1ZoWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplazFFWjNkTmVrVXlUWHBKTUUxc2IxaEVWRTE2VFVSamVrMVVSVEpOZWtrd1RXeHZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVEhJNENrOXNja1ZyWWpkT2MwVlVXbTE1ZEZZNU5sbHdiVTFWYkhJMmVIUklkamx0VkVORGJITlZXVUl2VDFWVE9EUlljbTB5YzFaSlJERmpUQ3R4Wm05RU5XOEtlV3B5YkdjeWNWWjFTMkp0ZEhkallsQkZSV1ppZDBoU2NrRXJiSFZaTDFJclNFMVFkMFlyWnpsUFIyMWFZVzlEVkRGSFZWZGliVXhoYmpRemQzVnFSQXBLVVRsNmFUaGhhRlpUUkRkMVZuWjBVREJLVkhjNFF6Um1OMVp5ZWtoT1ZqUjRhRkUxY0N0U1Zsb3dlRVJ1Y1hOelptSlZPUzluSzBKVldXNDRaa1ZpQ25jME5IbDJaalJuUzBjMlpqRnhhMEZXYW1GaE5ITmlOVE5tVFZwSU9YWm9Mek5qVldVMlEzWjZOVGxKYlVJMlIzWlVTbFp2UjB0bVRsTlJUWEpNYlVVS04wZFBaVTAzZEhoQlRtNUhORmRtWW5KVmRHUTJaa3B6WkVWUGRGSmxlbFpuYmpaeFptUmpjelJXWTB4cmRWVjNhR05ZVFRsWVIxcG1URFJuYUVNclRRcENkRGhSU2xsQldYZHZRMHBRV2xwelNWTk5RMEYzUlVGQllVNWFUVVpqZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVRTRSMEV4VldSRmQwVkNDaTkzVVVaTlFVMUNRV1k0ZDBoUldVUldVakJQUWtKWlJVWkpXbU5pU1ZkelUwOWhVV1JtY21Wc2RsRXllVmwwWjBKYU1qQk5RbFZIUVRGVlpFVlJVVThLVFVGNVEwTnRkREZaYlZaNVltMVdNRnBZVFhkRVVWbEtTMjlhU1doMlkwNUJVVVZNUWxGQlJHZG5SVUpCU0haT05XTkhaR3R1ZWxveVEwbHBhVXAyVmdwUU1WQjVUV2xzVFhRNU1XTk5lVlY2Yms0MVFqaFpSV292ZWxSeFRFUmpNbkYyU1VrMFlsSkdSazlsZGtWMU1VZ3djV2QzUnpoMlNqY3pRblJTVDFwSkNsSndhRVpoU1dsRmNrc3diSEJTVVV0YVEzUk5WR2RVUW10VldHdFNNVE5tY21OUVlrUkhPV2tyVkhkdlJXb3ZOa1VyZHpWR2NURXJlVVl5Yldsd1JYY0tVa3A0WW5KR2VqZEtaMnBtYkhaa2NHbEtkbXREZVhFMmIybzBaMnRaYjNCVVJrRk1ZWFZ4TmpkQ2JuUkNSMW93YlUxdk5tRnJXRmQ0Ym5jeVdUWTVZZ3BQVm5Cc1MxbzVUbVV6WVhaRWFWWlFMelpPWW5OWWFVbzVXVVpUU1ZKbEwzTmFXR2ROVldOVFRWTkZTa3BtTUc5bWRsSkxNMnBLUVdoSVRHRXJkazEyQ25KQ2F6ZG5TelJJYVV4U2JubHZPVlZFZERVd1pUTXlhM1ZwVFZaNlMyWnlhalpRVkdwemNtOVljWGhEVDNkeUwyb3ZSRFl5YTBkWVpuTktlVFJUY2tVS1JsQlpQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09CiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTAuMTAwLjAuMTA4OjY0NDMKICBuYW1lOiBjbHVzdGVyLmxvY2FsCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBjbHVzdGVyLmxvY2FsCiAgICB1c2VyOiBrdWJlcm5ldGVzLWFkbWluCiAgbmFtZToga3ViZXJuZXRlcy1hZG1pbkBjbHVzdGVyLmxvY2FsCmN1cnJlbnQtY29udGV4dDoga3ViZXJuZXRlcy1hZG1pbkBjbHVzdGVyLmxvY2FsCmtpbmQ6IENvbmZpZwpwcmVmZXJlbmNlczoge30KdXNlcnM6Ci0gbmFtZToga3ViZXJuZXRlcy1hZG1pbgogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkpWRU5EUVdkdFowRjNTVUpCWjBsSlZVZExSRUV2ZDI1TU16UjNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRWGRHVkVWVVRVSkZSMEV4VlVVS1FYaE5TMkV6Vm1sYVdFcDFXbGhTYkdONlFXVkdkekI1VFhwQk5FMUVUWGhPYWsxNVRrUktZVVozTUhsT1JFRTBUVVJqZUUxNlRUUk5SRkpoVFVSUmVBcEdla0ZXUW1kT1ZrSkJiMVJFYms0MVl6TlNiR0pVY0hSWldFNHdXbGhLZWsxU2EzZEdkMWxFVmxGUlJFVjRRbkprVjBwc1kyMDFiR1JIVm5wTVYwWnJDbUpYYkhWTlNVbENTV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVU5RFFWRTRRVTFKU1VKRFowdERRVkZGUVhOdFQzVnZTVU5vU1ZoR1ZEbEZaa29LTlRST1lrZExVMWwyWkc1TVlWbzJUMFZuSzJaS05ERnJOV0pPWjNOS2IwTjRURk5uTVZSQ2MyNU1aMFpMWm1zMVZVTllNR2xoTkZwaUsyVXJhWEJ1ZFFvNGNsVlJWMEZxWXpSblp5czFiU3RqVFdaRE9HbHZZV1JUZGk5VFIyOWpLMjR4ZG5BNWJWUlZTSEV4YUdKclNuSm9NQzl4U2pSaE1IaEpVbWhUVkdsUUNuSm5WM2cxYzNoaU4zRnBhRGMxY3pSSEt6SXlaVEoxTkZaQmJsUm1MMFZOYTI0M1NuSmxNRE00Y1ZSYVlTdFVkRlZJZW5kT1FucHFSMnQwSzFkQ00ySUtZMjlVUkdVMWVXSkVhVXB0TlZWa1NuZHJTbUY1VW0xVGFWRmhNM0pTYjB4amFVTnFNRmt5VW5aR1RXcHNjMFZwV1ZKeWFWUnNkMmhHVm5WMkt6WTNTQXBYUjNCT2FXSnlWVzFOZDJsaFNtZHNSVFZRUWxsTVV6bElSSFJ0UnpWQ1oweEZOMWd2VmtwM01qZGtWRUp5V21wRWFHSlRlVWRVZWt0TldFVXhZWGg2Q2xCS1QwaHhkMGxFUVZGQlFtOHhXWGRXUkVGUFFtZE9Wa2hST0VKQlpqaEZRa0ZOUTBKaFFYZEZkMWxFVmxJd2JFSkJkM2REWjFsSlMzZFpRa0pSVlVnS1FYZEpkMFJCV1VSV1VqQlVRVkZJTDBKQlNYZEJSRUZtUW1kT1ZraFRUVVZIUkVGWFowSlRSMWhIZVVaeVJXcHRhMGhZTmpOd1lqQk9jMjFNV1VGWFpBcDBSRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZCVDBOQlVVVkJVbUpST0dVeVF6bE9Ua2xhSzBseFQySk9NRTF1ZWpCVlZFcGtTblJhYzFOc1FVUlpDbG8wVkVJNVdVczBTbFp6ZUdocGIyVjJNbWxMWjNaM01qSlRPRnBsUW5GWWFrMUJVVGRuT1RCd1pTODFTVGxWU2xFM2EwdHVXa2RCYzA1VFpuTmlTM29LZEV0MllsRmlURzF0VWtwUlpGbGhXVzlIWlZkcGVtaGpaMlJJUTBSM1IyMHJNRE5IY2l0d1IzWnVTWGR2WVhvclRrbEpjbE50Ym0xU1JYQjNTVTAxTmdwREwxVkxSMUEyT0haUVZUQXJXRVptV0RSalNGZExjREVyUnpOMWRIRnVjbXBXWWpGbE5YVjRNMWRZUm1adWEzVmxablZIVlhVd1prVTVVVVEzVlZoS0NtdDNaSFZWSzI5V1ZFcFRaREJJUVdkRWQwVm5lbkJPU0M4emJUQlJWRmhSZFhoeUx5OHlOSGRZTDNGVVkxUlhWVVZ5YVdWNGJVWmtlR0pqY21wQ1IwY0taMkpXWmtWVVRVVjBTSGRpY2sxNFJFOUVaV1ZGTTJoSFlrWnlRa1J4VnpSVlEwVkhjRUZuYWtaU1RGZDBUbFZXYTJjOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjNkSlFrRkJTME5CVVVWQmMyMVBkVzlKUTJoSldFWlVPVVZtU2pVMFRtSkhTMU5aZG1SdVRHRmFOazlGWnl0bVNqUXhhelZpVG1kelNtOURDbmhNVTJjeFZFSnpia3huUmt0bWF6VlZRMWd3YVdFMFdtSXJaU3RwY0c1MU9ISlZVVmRCYW1NMFoyY3JOVzByWTAxbVF6aHBiMkZrVTNZdlUwZHZZeXNLYmpGMmNEbHRWRlZJY1RGb1ltdEtjbWd3TDNGS05HRXdlRWxTYUZOVWFWQnlaMWQ0TlhONFlqZHhhV2czTlhNMFJ5c3lNbVV5ZFRSV1FXNVVaaTlGVFFwcmJqZEtjbVV3TXpoeFZGcGhLMVIwVlVoNmQwNUNlbXBIYTNRclYwSXpZbU52VkVSbE5YbGlSR2xLYlRWVlpFcDNhMHBoZVZKdFUybFJZVE55VW05TUNtTnBRMm93V1RKU2RrWk5hbXh6UldsWlVuSnBWR3gzYUVaV2RYWXJOamRJVjBkd1RtbGljbFZ0VFhkcFlVcG5iRVUxVUVKWlRGTTVTRVIwYlVjMVFtY0tURVUzV0M5V1NuY3lOMlJVUW5KYWFrUm9ZbE41UjFSNlMwMVlSVEZoZUhwUVNrOUljWGRKUkVGUlFVSkJiMGxDUVVVelNIUjBiRmR1UjNJelptUkxVd3BDYnk5RFRERk5WVmRYUkZZclMwbHdkSFZ3WWtVeGNuTm9TMU1yZWtwaVZEUkJZMmxrYzI1a2Jtc3pTekJ5TWxaYVFUY3hUR0ZXYlZkelRETlBXbGt6Q2xCbU9XNVJVMUZTV1ZSWVVYZEtVVFkzT1VNMmJGbHhWVE5VY0ZwU2NVODBaVzAyUkZwblV5OTFPV3hSV1ZvemQzRmxMMHQzVmpkUmJHcHliRTlaU0hrS1ptNXpla1Z1YkN0bE1ITmFSR1J3Y1ZKR1IzaEhVa3hDVTJoTGFIQTVSeTl1ZG5oQ2NXWnFjM3AyUlZKUlEyOVlRVXgwUTFOek0wYzRVMVZSYlc4NGJRcDVjMWM0TUVWTE1VNDVhblZNU20xMWFrVktUMGxOVEROd2VGbFRVR05FUm14dE1reHNZMEYzVFU1S2JtbE9PVGxzZEhsNFdsWlpRaXRzVldkRmRHRkJDalpPTkhwdU1XaEZRVzlFYVUxTE1qSndVbFp6Y0hCQ2VEaG1WMlJCUTFCdlRIQjNNMFk0Y0hWSVYwTXJVVUZ5YUdKT01tRnNhREF6UkdOc1JUWldRVlFLTHpCclJURTNSVU5uV1VWQk1YTkhOa2xLT0U1blJTdHNibFZ0WWtWclNuZE9SMHRHTTNGMVEwdFlabVYwZVRkNkx6QlBNV3RRYlRVNFZVNDJWa3BoYWdwSFRYVk9ObVpEYVd4RFJFdFlVMDVGTTFkeFUwbFVObEZUU2s5dE1sRmxiVFoyWmpsWmVXYzBRbEZCVm5STGIxTmxVMjFRV1V4V2NsTndZakIzS3pGT0NsaHpRVVpRTkhWNFUxTjRiRXhpTVU1M1VFMVhVVGROZUVGNmJHUXhVblJOV1VsM1JGTm1Va1pDUlROWGRVa3lUWGRxSzBKa1IydERaMWxGUVRGTFdDc0tjREJHWlhWTlVrWkJaSFpZYmpoU1JqSmxUVTVyUlRCWWR6bEpWMjltZGxCbWFHVktkRUZ2Umt3MVFqRnViM0V4YkhkYVMwMXRVbmhyU0VJM05VVkZWQXBIWnpoYWJHTmFjMUZDYVdKU2NETnhhalUwUW10c1QwdDBibEJuU1U5bGVtTldPV001Vm1Sa09HNUZZWFEwV2xsTVpGQnNTSGxvTm1zeFRHazRMMWREQ213M2NqTldlbEZJY0ZoV1QzZDBVME13WW1aQkwxZHRUVmsyVUhCUGJuVlhMMEYyUVhsUVRVTm5XVUZOTVZFMlYwaEhjbTFIT1hjNWFHTlNjVloxV0RFS1pURXlZMkpKYzJWb2VtTmliM2RoV2xocFdtWlFNSHBLUTJOemNHVnpZazFIU0RKdFYwOWhaVU13WlUxUlUzUkJVRGR1ZW0xd1ZuTm5UVmxpWldOWFZBcHFURmh5VlhRdmJVUktZeTlqUm05cFR6QlhRamxrVlhaWk9ETkZWakF5YTA0M01GbHBkbEpST1hkSmEzUlpZMHd6U0hGalIxQjZOSGRHYWtjdmVHRldDbEJyYVVWQ2MwTkpMMVV5ZWxGWFNVUjVWaXR0TkZGTFFtZEdjblV4VUU4ck56TjFRbUZ4VkRreGNtOWhWekpvZFZGTGJWcFlabFVyUkV4SFpVWmlLM01LTTNoVVpsTkNTbkkyZGtGMVJISk5WRmhJTUhGSFMyOVZaamxaSzNkaFZtVkhZVzVFYmxKNldIRlBZazEwY2xwT1kyZDVXbkoyUzFGdlMwcFNhM0J0UkFwc2VWQlFRbGg1WTFGNmJVSjFTV3cwVjBRd00zVlNjbmN3WkRWVEsxWktZa0ZHVVVwRGRFRkdWblpZV0c1Rk1rVkVORWxQVGxwMVUxSjZWR05FZEdWbUNsTjNVbXBCYjBkQ1FVMUtVVlIwUzJ4Nk9FbEZUV0ZCTWs5R2JYQjJhR2RDZURGVmJFcE9iM1ZIUVRWcVNqUk9RMXBxVkhoVkwyNXJhV1l2UWpnd01UWUtjVVJGWTA0clZFdzJWVUo2TlVOellYbHBSa0U1VlVjd2JVcGxZVnBEZEdacWJHRkRNM2R2T1ZNMFMxVk1WRXR4Ym5VM1RHTk1Vemg0T0VrMmMxazRiUXBZV1dkeVZUbHVVVmQxUkRFMU5rTm5LMnRYT1d4dGJHeHVSamcwZUhNek9WVnVWVlJYVEhWYWJVcHJjV2w1VUN0MlZHWjFDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQ==




{{base.url}}/apis/cluster.kubesphere.io/v1alpha1/clusters?fieldManager=admin&pretty=true

{
    "apiVersion": "cluster.kubesphere.io/v1alpha1",
    "kind": "Cluster",
    "metadata": {
        "annotations": {
            "kubesphere.io/description": "member cluster api join test"
        },
        "labels": {
            "cluster.kubesphere.io/group": "demo"
        },
        "name": "mcluster2"
    },
    "spec": {
        "connection": {
            "kubeconfig": "YXBpVmVyc2lvbjogdjEKY2x1c3RlcnM6Ci0gY2x1c3RlcjoKICAgIGNlcnRpZmljYXRlLWF1dGhvcml0eS1kYXRhOiBMUzB0TFMxQ1JVZEpUaUJEUlZKVVNVWkpRMEZVUlMwdExTMHRDazFKU1VNdmFrTkRRV1ZoWjBGM1NVSkJaMGxDUVVSQlRrSm5hM0ZvYTJsSE9YY3dRa0ZSYzBaQlJFRldUVkpOZDBWUldVUldVVkZFUlhkd2NtUlhTbXdLWTIwMWJHUkhWbnBOUWpSWVJGUkplazFFWjNkTmVrVXlUWHBKTUUxc2IxaEVWRTE2VFVSamVrMVVSVEpOZWtrd1RXeHZkMFpVUlZSTlFrVkhRVEZWUlFwQmVFMUxZVE5XYVZwWVNuVmFXRkpzWTNwRFEwRlRTWGRFVVZsS1MyOWFTV2gyWTA1QlVVVkNRbEZCUkdkblJWQkJSRU5EUVZGdlEyZG5SVUpCVEhJNENrOXNja1ZyWWpkT2MwVlVXbTE1ZEZZNU5sbHdiVTFWYkhJMmVIUklkamx0VkVORGJITlZXVUl2VDFWVE9EUlljbTB5YzFaSlJERmpUQ3R4Wm05RU5XOEtlV3B5YkdjeWNWWjFTMkp0ZEhkallsQkZSV1ppZDBoU2NrRXJiSFZaTDFJclNFMVFkMFlyWnpsUFIyMWFZVzlEVkRGSFZWZGliVXhoYmpRemQzVnFSQXBLVVRsNmFUaGhhRlpUUkRkMVZuWjBVREJLVkhjNFF6Um1OMVp5ZWtoT1ZqUjRhRkUxY0N0U1Zsb3dlRVJ1Y1hOelptSlZPUzluSzBKVldXNDRaa1ZpQ25jME5IbDJaalJuUzBjMlpqRnhhMEZXYW1GaE5ITmlOVE5tVFZwSU9YWm9Mek5qVldVMlEzWjZOVGxKYlVJMlIzWlVTbFp2UjB0bVRsTlJUWEpNYlVVS04wZFBaVTAzZEhoQlRtNUhORmRtWW5KVmRHUTJaa3B6WkVWUGRGSmxlbFpuYmpaeFptUmpjelJXWTB4cmRWVjNhR05ZVFRsWVIxcG1URFJuYUVNclRRcENkRGhSU2xsQldYZHZRMHBRV2xwelNWTk5RMEYzUlVGQllVNWFUVVpqZDBSbldVUldVakJRUVZGSUwwSkJVVVJCWjB0clRVRTRSMEV4VldSRmQwVkNDaTkzVVVaTlFVMUNRV1k0ZDBoUldVUldVakJQUWtKWlJVWkpXbU5pU1ZkelUwOWhVV1JtY21Wc2RsRXllVmwwWjBKYU1qQk5RbFZIUVRGVlpFVlJVVThLVFVGNVEwTnRkREZaYlZaNVltMVdNRnBZVFhkRVVWbEtTMjlhU1doMlkwNUJVVVZNUWxGQlJHZG5SVUpCU0haT05XTkhaR3R1ZWxveVEwbHBhVXAyVmdwUU1WQjVUV2xzVFhRNU1XTk5lVlY2Yms0MVFqaFpSV292ZWxSeFRFUmpNbkYyU1VrMFlsSkdSazlsZGtWMU1VZ3djV2QzUnpoMlNqY3pRblJTVDFwSkNsSndhRVpoU1dsRmNrc3diSEJTVVV0YVEzUk5WR2RVUW10VldHdFNNVE5tY21OUVlrUkhPV2tyVkhkdlJXb3ZOa1VyZHpWR2NURXJlVVl5Yldsd1JYY0tVa3A0WW5KR2VqZEtaMnBtYkhaa2NHbEtkbXREZVhFMmIybzBaMnRaYjNCVVJrRk1ZWFZ4TmpkQ2JuUkNSMW93YlUxdk5tRnJXRmQ0Ym5jeVdUWTVZZ3BQVm5Cc1MxbzVUbVV6WVhaRWFWWlFMelpPWW5OWWFVbzVXVVpUU1ZKbEwzTmFXR2ROVldOVFRWTkZTa3BtTUc5bWRsSkxNMnBLUVdoSVRHRXJkazEyQ25KQ2F6ZG5TelJJYVV4U2JubHZPVlZFZERVd1pUTXlhM1ZwVFZaNlMyWnlhalpRVkdwemNtOVljWGhEVDNkeUwyb3ZSRFl5YTBkWVpuTktlVFJUY2tVS1JsQlpQUW90TFMwdExVVk9SQ0JEUlZKVVNVWkpRMEZVUlMwdExTMHRDZz09CiAgICBzZXJ2ZXI6IGh0dHBzOi8vMTAuMTAwLjAuMTA4OjY0NDMKICBuYW1lOiBjbHVzdGVyLmxvY2FsCmNvbnRleHRzOgotIGNvbnRleHQ6CiAgICBjbHVzdGVyOiBjbHVzdGVyLmxvY2FsCiAgICB1c2VyOiBrdWJlcm5ldGVzLWFkbWluCiAgbmFtZToga3ViZXJuZXRlcy1hZG1pbkBjbHVzdGVyLmxvY2FsCmN1cnJlbnQtY29udGV4dDoga3ViZXJuZXRlcy1hZG1pbkBjbHVzdGVyLmxvY2FsCmtpbmQ6IENvbmZpZwpwcmVmZXJlbmNlczoge30KdXNlcnM6Ci0gbmFtZToga3ViZXJuZXRlcy1hZG1pbgogIHVzZXI6CiAgICBjbGllbnQtY2VydGlmaWNhdGUtZGF0YTogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVUkpWRU5EUVdkdFowRjNTVUpCWjBsSlZVZExSRUV2ZDI1TU16UjNSRkZaU2t0dldrbG9kbU5PUVZGRlRFSlJRWGRHVkVWVVRVSkZSMEV4VlVVS1FYaE5TMkV6Vm1sYVdFcDFXbGhTYkdONlFXVkdkekI1VFhwQk5FMUVUWGhPYWsxNVRrUktZVVozTUhsT1JFRTBUVVJqZUUxNlRUUk5SRkpoVFVSUmVBcEdla0ZXUW1kT1ZrSkJiMVJFYms0MVl6TlNiR0pVY0hSWldFNHdXbGhLZWsxU2EzZEdkMWxFVmxGUlJFVjRRbkprVjBwc1kyMDFiR1JIVm5wTVYwWnJDbUpYYkhWTlNVbENTV3BCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVU5RFFWRTRRVTFKU1VKRFowdERRVkZGUVhOdFQzVnZTVU5vU1ZoR1ZEbEZaa29LTlRST1lrZExVMWwyWkc1TVlWbzJUMFZuSzJaS05ERnJOV0pPWjNOS2IwTjRURk5uTVZSQ2MyNU1aMFpMWm1zMVZVTllNR2xoTkZwaUsyVXJhWEJ1ZFFvNGNsVlJWMEZxWXpSblp5czFiU3RqVFdaRE9HbHZZV1JUZGk5VFIyOWpLMjR4ZG5BNWJWUlZTSEV4YUdKclNuSm9NQzl4U2pSaE1IaEpVbWhUVkdsUUNuSm5WM2cxYzNoaU4zRnBhRGMxY3pSSEt6SXlaVEoxTkZaQmJsUm1MMFZOYTI0M1NuSmxNRE00Y1ZSYVlTdFVkRlZJZW5kT1FucHFSMnQwSzFkQ00ySUtZMjlVUkdVMWVXSkVhVXB0TlZWa1NuZHJTbUY1VW0xVGFWRmhNM0pTYjB4amFVTnFNRmt5VW5aR1RXcHNjMFZwV1ZKeWFWUnNkMmhHVm5WMkt6WTNTQXBYUjNCT2FXSnlWVzFOZDJsaFNtZHNSVFZRUWxsTVV6bElSSFJ0UnpWQ1oweEZOMWd2VmtwM01qZGtWRUp5V21wRWFHSlRlVWRVZWt0TldFVXhZWGg2Q2xCS1QwaHhkMGxFUVZGQlFtOHhXWGRXUkVGUFFtZE9Wa2hST0VKQlpqaEZRa0ZOUTBKaFFYZEZkMWxFVmxJd2JFSkJkM2REWjFsSlMzZFpRa0pSVlVnS1FYZEpkMFJCV1VSV1VqQlVRVkZJTDBKQlNYZEJSRUZtUW1kT1ZraFRUVVZIUkVGWFowSlRSMWhIZVVaeVJXcHRhMGhZTmpOd1lqQk9jMjFNV1VGWFpBcDBSRUZPUW1kcmNXaHJhVWM1ZHpCQ1FWRnpSa0ZCVDBOQlVVVkJVbUpST0dVeVF6bE9Ua2xhSzBseFQySk9NRTF1ZWpCVlZFcGtTblJhYzFOc1FVUlpDbG8wVkVJNVdVczBTbFp6ZUdocGIyVjJNbWxMWjNaM01qSlRPRnBsUW5GWWFrMUJVVGRuT1RCd1pTODFTVGxWU2xFM2EwdHVXa2RCYzA1VFpuTmlTM29LZEV0MllsRmlURzF0VWtwUlpGbGhXVzlIWlZkcGVtaGpaMlJJUTBSM1IyMHJNRE5IY2l0d1IzWnVTWGR2WVhvclRrbEpjbE50Ym0xU1JYQjNTVTAxTmdwREwxVkxSMUEyT0haUVZUQXJXRVptV0RSalNGZExjREVyUnpOMWRIRnVjbXBXWWpGbE5YVjRNMWRZUm1adWEzVmxablZIVlhVd1prVTVVVVEzVlZoS0NtdDNaSFZWSzI5V1ZFcFRaREJJUVdkRWQwVm5lbkJPU0M4emJUQlJWRmhSZFhoeUx5OHlOSGRZTDNGVVkxUlhWVVZ5YVdWNGJVWmtlR0pqY21wQ1IwY0taMkpXWmtWVVRVVjBTSGRpY2sxNFJFOUVaV1ZGTTJoSFlrWnlRa1J4VnpSVlEwVkhjRUZuYWtaU1RGZDBUbFZXYTJjOVBRb3RMUzB0TFVWT1JDQkRSVkpVU1VaSlEwRlVSUzB0TFMwdENnPT0KICAgIGNsaWVudC1rZXktZGF0YTogTFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVWxGYjNkSlFrRkJTME5CVVVWQmMyMVBkVzlKUTJoSldFWlVPVVZtU2pVMFRtSkhTMU5aZG1SdVRHRmFOazlGWnl0bVNqUXhhelZpVG1kelNtOURDbmhNVTJjeFZFSnpia3huUmt0bWF6VlZRMWd3YVdFMFdtSXJaU3RwY0c1MU9ISlZVVmRCYW1NMFoyY3JOVzByWTAxbVF6aHBiMkZrVTNZdlUwZHZZeXNLYmpGMmNEbHRWRlZJY1RGb1ltdEtjbWd3TDNGS05HRXdlRWxTYUZOVWFWQnlaMWQ0TlhONFlqZHhhV2czTlhNMFJ5c3lNbVV5ZFRSV1FXNVVaaTlGVFFwcmJqZEtjbVV3TXpoeFZGcGhLMVIwVlVoNmQwNUNlbXBIYTNRclYwSXpZbU52VkVSbE5YbGlSR2xLYlRWVlpFcDNhMHBoZVZKdFUybFJZVE55VW05TUNtTnBRMm93V1RKU2RrWk5hbXh6UldsWlVuSnBWR3gzYUVaV2RYWXJOamRJVjBkd1RtbGljbFZ0VFhkcFlVcG5iRVUxVUVKWlRGTTVTRVIwYlVjMVFtY0tURVUzV0M5V1NuY3lOMlJVUW5KYWFrUm9ZbE41UjFSNlMwMVlSVEZoZUhwUVNrOUljWGRKUkVGUlFVSkJiMGxDUVVVelNIUjBiRmR1UjNJelptUkxVd3BDYnk5RFRERk5WVmRYUkZZclMwbHdkSFZ3WWtVeGNuTm9TMU1yZWtwaVZEUkJZMmxrYzI1a2Jtc3pTekJ5TWxaYVFUY3hUR0ZXYlZkelRETlBXbGt6Q2xCbU9XNVJVMUZTV1ZSWVVYZEtVVFkzT1VNMmJGbHhWVE5VY0ZwU2NVODBaVzAyUkZwblV5OTFPV3hSV1ZvemQzRmxMMHQzVmpkUmJHcHliRTlaU0hrS1ptNXpla1Z1YkN0bE1ITmFSR1J3Y1ZKR1IzaEhVa3hDVTJoTGFIQTVSeTl1ZG5oQ2NXWnFjM3AyUlZKUlEyOVlRVXgwUTFOek0wYzRVMVZSYlc4NGJRcDVjMWM0TUVWTE1VNDVhblZNU20xMWFrVktUMGxOVEROd2VGbFRVR05FUm14dE1reHNZMEYzVFU1S2JtbE9PVGxzZEhsNFdsWlpRaXRzVldkRmRHRkJDalpPTkhwdU1XaEZRVzlFYVUxTE1qSndVbFp6Y0hCQ2VEaG1WMlJCUTFCdlRIQjNNMFk0Y0hWSVYwTXJVVUZ5YUdKT01tRnNhREF6UkdOc1JUWldRVlFLTHpCclJURTNSVU5uV1VWQk1YTkhOa2xLT0U1blJTdHNibFZ0WWtWclNuZE9SMHRHTTNGMVEwdFlabVYwZVRkNkx6QlBNV3RRYlRVNFZVNDJWa3BoYWdwSFRYVk9ObVpEYVd4RFJFdFlVMDVGTTFkeFUwbFVObEZUU2s5dE1sRmxiVFoyWmpsWmVXYzBRbEZCVm5STGIxTmxVMjFRV1V4V2NsTndZakIzS3pGT0NsaHpRVVpRTkhWNFUxTjRiRXhpTVU1M1VFMVhVVGROZUVGNmJHUXhVblJOV1VsM1JGTm1Va1pDUlROWGRVa3lUWGRxSzBKa1IydERaMWxGUVRGTFdDc0tjREJHWlhWTlVrWkJaSFpZYmpoU1JqSmxUVTVyUlRCWWR6bEpWMjltZGxCbWFHVktkRUZ2Umt3MVFqRnViM0V4YkhkYVMwMXRVbmhyU0VJM05VVkZWQXBIWnpoYWJHTmFjMUZDYVdKU2NETnhhalUwUW10c1QwdDBibEJuU1U5bGVtTldPV001Vm1Sa09HNUZZWFEwV2xsTVpGQnNTSGxvTm1zeFRHazRMMWREQ213M2NqTldlbEZJY0ZoV1QzZDBVME13WW1aQkwxZHRUVmsyVUhCUGJuVlhMMEYyUVhsUVRVTm5XVUZOTVZFMlYwaEhjbTFIT1hjNWFHTlNjVloxV0RFS1pURXlZMkpKYzJWb2VtTmliM2RoV2xocFdtWlFNSHBLUTJOemNHVnpZazFIU0RKdFYwOWhaVU13WlUxUlUzUkJVRGR1ZW0xd1ZuTm5UVmxpWldOWFZBcHFURmh5VlhRdmJVUktZeTlqUm05cFR6QlhRamxrVlhaWk9ETkZWakF5YTA0M01GbHBkbEpST1hkSmEzUlpZMHd6U0hGalIxQjZOSGRHYWtjdmVHRldDbEJyYVVWQ2MwTkpMMVV5ZWxGWFNVUjVWaXR0TkZGTFFtZEdjblV4VUU4ck56TjFRbUZ4VkRreGNtOWhWekpvZFZGTGJWcFlabFVyUkV4SFpVWmlLM01LTTNoVVpsTkNTbkkyZGtGMVJISk5WRmhJTUhGSFMyOVZaamxaSzNkaFZtVkhZVzVFYmxKNldIRlBZazEwY2xwT1kyZDVXbkoyUzFGdlMwcFNhM0J0UkFwc2VWQlFRbGg1WTFGNmJVSjFTV3cwVjBRd00zVlNjbmN3WkRWVEsxWktZa0ZHVVVwRGRFRkdWblpZV0c1Rk1rVkVORWxQVGxwMVUxSjZWR05FZEdWbUNsTjNVbXBCYjBkQ1FVMUtVVlIwUzJ4Nk9FbEZUV0ZCTWs5R2JYQjJhR2RDZURGVmJFcE9iM1ZIUVRWcVNqUk9RMXBxVkhoVkwyNXJhV1l2UWpnd01UWUtjVVJGWTA0clZFdzJWVUo2TlVOellYbHBSa0U1VlVjd2JVcGxZVnBEZEdacWJHRkRNM2R2T1ZNMFMxVk1WRXR4Ym5VM1RHTk1Vemg0T0VrMmMxazRiUXBZV1dkeVZUbHVVVmQxUkRFMU5rTm5LMnRYT1d4dGJHeHVSamcwZUhNek9WVnVWVlJYVEhWYWJVcHJjV2w1VUN0MlZHWjFDaTB0TFMwdFJVNUVJRkpUUVNCUVVrbFdRVlJGSUV0RldTMHRMUzB0Q2c9PQ==",
            "type": "direct"
        },
        "joinFederation": true,
        "provider": ""
    }
}